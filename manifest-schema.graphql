scalar String
scalar File
scalar BigInt

type Schema {
  file: File!
}

type Manifest {
  file: File!
}

union DataSource = EthereumContractDataSource
union DataSourceTemplate = EthereumContractDataSourceTemplate

type EthereumContractDataSource {
  kind: String!
  name: String!
  network: String
  source: EthereumContractSource!
  mapping: EthereumContractMapping!
}

type EthereumContractSource {
  address: String
  abi: String!
  startBlock: BigInt
}

type EthereumContractMapping {
  kind: String!
  apiVersion: String!
  language: String!
  file: File!
  entities: [String!]!
  abis: [EthereumContractAbi!]!
  blockHandlers: [EthereumBlockHandler!]
  callHandlers: [EthereumCallHandler!]
  eventHandlers: [EthereumContractEventHandler!]
}

type EthereumContractAbi {
  name: String!
  file: File!
}

type EthereumBlockHandler {
  handler: String!
  filter: EthereumBlockFilter
}

type EthereumBlockFilter {
  kind: String!
}

type EthereumCallHandler {
  function: String!
  handler: String!
}

type EthereumContractEventHandler {
  event: String!
  topic0: String
  handler: String!
}

type SubgraphManifest {
  specVersion: String!
  schema: Schema!
  mutations: Manifest
  description: String
  repository: String
  dataSources: [DataSource!]!
  templates: [DataSourceTemplate!]
}

type EthereumContractDataSourceTemplate {
  kind: String!
  name: String!
  network: String
  source: EthereumContractSourceTemplate!
  mapping: EthereumContractMapping!
}

type EthereumContractSourceTemplate {
  abi: String!
}

union Resolvers = JavascriptResolvers

type JavascriptResolvers {
  kind: String!
  file: File!
}

type MutationsManifest {
  specVersion: String!
  repository: String
  mutations: Mutations!
}

type Mutations {
  schema: Schema!
  resolvers: Resolvers
}
